{"version":3,"sources":["components/Chart/Chart.js","components/Casecards/Casescard.js","components/Countrylist/Countrylist.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["Chart","this","props","type","className","backgroundcolor","label","data","options","title","display","text","width","height","maintainAspectRatio","Component","Card","class","metrics","percentage","Countrylist","onClick","click","countryName","App","state","chartDataTotalCases","labels","datasets","backgroundColor","hidden","chartDataDeathsVsRecovered","chartDataActiveCasesLogarithmic","scales","yAxes","cardsData","totalCases","activeCases","deceased","discharged","countryList","changeCountryHandler","countryId","countryData","confirmedCases","deaths","recovered","dataPosition","Object","entries","value","confirmed","date","setState","totalCasesWorldWide","activeCasesWorldWide","deceasedWordlWide","dischargedWorldWide","length","newCases","percentageActiveCases","xhr","XMLHttpRequest","open","responseType","onload","defaultCountry","response","US","countryListArray","itterator","push","send","map","country","key","src","logo","alt","toFixed","legend","tooltips","callbacks","tooltipItem","yLabel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.bb205b72.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Line, Doughnut, Bar } from 'react-chartjs-2';\r\nimport \"./Chart.css\";\r\n\r\nclass Chart extends Component {\r\n  render() {\r\n    if (this.props.type === 'Line')\r\n      return (\r\n        <div className=\"Line\">\r\n          <Line\r\n            backgroundcolor={this.props.backgroundcolor}\r\n            label={this.props.label}\r\n            data={this.props.data}\r\n            options={{\r\n              title: {\r\n                display: this.props.display,\r\n                text: this.props.text\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      )\r\n\r\n    else if (this.props.type === 'Doughnut')\r\n      return (\r\n        <div className=\"Doughnut\">\r\n          <Doughnut\r\n            width={this.props.width}\r\n            height={this.props.height}\r\n            backgroundcolor={this.props.backgroundcolor}\r\n            label={this.props.label}\r\n            data={this.props.data}\r\n            options={{\r\n              maintainAspectRatio: false\r\n            }}\r\n          />\r\n        </div>\r\n      )\r\n\r\n    else if (this.props.type === 'Bar')\r\n      return (\r\n        <div className=\"Doughnut\">\r\n          <Bar\r\n            backgroundcolor={this.props.backgroundcolor}\r\n            label={this.props.label}\r\n            data={this.props.data}\r\n            options={{\r\n              maintainAspectRatio: false\r\n            }}\r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport \"./Casescard.css\"\r\n\r\nconst Card = (props) =>{\r\n// console.log(props);\r\n\r\nreturn (\r\n\r\n\r\n<div className={props.class}>\r\n<h3 className='cardTitle'>{props.title}</h3>\r\n<span className='cardMetrics'>{props.metrics}</span>\r\n<span className='cardPercentage'><span className='cardPercentage-percentage'>{props.percentage}</span><span className='cardPercentage-text'> of total cases</span></span>\r\n</div>\r\n\r\n\r\n);\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './Countrylist.css';\r\n\r\n\r\nconst Countrylist = (props) => {\r\n\r\n    \r\n    \r\n//   console.log(props);\r\n    \r\n    return (\r\n        <div className='country'>\r\n            \r\n  <button onClick={props.click}>{props.countryName}</button>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Countrylist;\r\n","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Components\nimport Chart from './components/Chart/Chart';\nimport Card from './components/Casecards/Casescard';\nimport Countrylist from './components/Countrylist/Countrylist.js';\n\nclass App extends Component {\n  state = {\n\n    chartDataTotalCases: {\n\n      labels: [],\n\n      datasets: [\n        {\n          label: 'Confirmed Cases',\n          data: [],\n          backgroundColor: 'rgba(65,131,196,0.9)',\n          hidden: true\n        }],\n\n      options: {\n        title: {\n          display: true,\n          text: 'Confirmed Cases'\n        },\n      },\n    },\n\n    chartDataDeathsVsRecovered: {\n      labels: [],\n      datasets: [{\n        label: 'Confirmed Cases',\n        data: [],\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      },\n\n      {\n        label: 'Deaths',\n        data: [],\n        backgroundColor: 'rgba(253, 179, 175, 0.8)',\n      },\n\n      {\n        label: 'Recovered',\n        data: [],\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      }],\n\n      options: {\n        title: {\n          display: true,\n          text: 'Recoveries VS Deaths'\n        }\n      }\n    },\n\n    chartDataActiveCasesLogarithmic: {\n\n      labels: [],\n\n      datasets: [\n        {\n          label: 'Confirmed Cases',\n          data: [],\n          backgroundColor: 'rgba(65,131,196,0.4)',\n          hidden: false\n        }],\n\n      options: {\n        title: {\n          display: true,\n          text: 'Confirmed Cases'\n        },\n        scales: {\n          yAxes: [{\n            type: 'logarithmic'\n          }]\n        }\n      },\n    },\n\n    cardsData: {\n      totalCases: 0,\n      activeCases: 0,\n      deceased: 0,\n      discharged: 0\n    },\n\n    countryList: []\n  }\n\n\n  componentDidMount() {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'https://pomber.github.io/covid19/timeseries.json');\n    xhr.responseType = 'json';\n    xhr.onload = () => {\n\n      let defaultCountry = [...xhr.response.US];\n      let countryList = xhr.response;\n      let confirmedCases = [];\n      let activeCases = [];\n      let deaths = [];\n      let recovered = [];\n      let labels = [];\n      let dataPosition = 0;\n      let countryListArray = [];\n      let itterator = 0;\n\n      // Create Country List Object with ID, Country Name , Country Data\n      for (let countryName in countryList) {\n        countryListArray.push({ countryId: itterator, countryName: countryName, countryData: countryList[countryName] });\n        itterator++\n      }\n\n      // Fetched Data Calculations\n      // Calculate for Selected Country\n      for (let [key, value] of Object.entries(defaultCountry)) {\n        if (value.recovered !== 0 || value.deaths !== 0) { // Start Displaying Since the first Death OR the first recovered occured\n          confirmedCases[dataPosition] = value.confirmed;\n          deaths[dataPosition] = value.deaths;\n          recovered[dataPosition] = value.recovered;\n          // backgroundColors[dataPosition] = \"rgba(\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \",0.2\" + \")\";\n          labels[dataPosition] = value.date;\n          dataPosition += 1;\n        }\n      }\n\n      this.setState({\n        //Set Default Country State\n        chartDataTotalCases: {\n\n          labels: labels,\n\n          datasets: [\n            {\n              label: 'Confirmed Cases',\n              data: confirmedCases,\n              backgroundColor: 'rgba(65,131,196,0.4)',\n              hidden: false\n            }],\n\n          options: {\n            title: {\n              display: true,\n              text: 'Confirmed Cases'\n            },\n          }\n        },\n\n        chartDataDeathsVsRecovered: {\n\n          labels: labels,\n\n          datasets: [\n            {\n              label: 'Confirmed Cases',\n              data: confirmedCases,\n              backgroundColor: 'rgba(65,131,196,0.4)',\n              hidden: true\n            },\n\n            {\n              label: 'Deaths',\n              data: deaths,\n              // backgroundColor: backgroundColors,\n              backgroundColor: 'rgba(249, 54, 80, 0.2)'\n            },\n\n            {\n              label: 'Recovered',\n              data: recovered,\n              // backgroundColor: backgroundColors,\n              backgroundColor: 'rgba(249, 254, 239, 0.9)'\n            }\n\n          ],\n          options: {\n            title: {\n              display: true,\n              text: 'Recoveries VS Deaths'\n            },\n          },\n\n        },\n\n        chartDataActiveCasesLogarithmic: {\n\n          labels: labels,\n\n          datasets: [\n            {\n              label: 'Active Cases (Logarithmic)',\n              data: activeCases,\n              backgroundColor: 'rgba(65,131,196,0.4)',\n              hidden: false\n            }],\n\n          options: {\n            title: {\n              display: true,\n              text: 'Confirmed Cases'\n            },\n            scales: {\n              yAxes: [{\n                type: 'logarithmic'\n              }]\n            }\n          },\n\n        },\n\n        cardsData: {\n          totalCasesWorldWide: 1,\n          activeCasesWorldWide: 1,\n          deceasedWordlWide: 1,\n          dischargedWorldWide: 1,\n          totalCases: confirmedCases[confirmedCases.length - 1],\n          activeCases: confirmedCases[confirmedCases.length - 1] - recovered[recovered.length - 1] - deaths[deaths.length - 1],\n          deceased: deaths[deaths.length - 1],\n          discharged: recovered[recovered.length - 1],\n          newCases: confirmedCases[confirmedCases.length - 1] - confirmedCases[confirmedCases.length - 2],\n          percentageActiveCases: 2\n        },\n\n        countryName: 'USA',\n\n        countryList: countryListArray\n      })\n    };\n    xhr.send();\n  }\n\n  changeCountryHandler = (countryId, countryName, countryData) => {\n    let confirmedCases = [];\n    let activeCases = [];\n    let deaths = [];\n    let recovered = [];\n    let labels = [];\n    let dataPosition = 0;\n\n    // Fetched Data Calculations\n    // Calculate for Selected Country\n    for (let [key, value] of Object.entries(countryData)) {\n      if (value.recovered !== 0 || value.deaths !== 0) { // Start Displaying Since the first Death OR the first recovered occured\n        confirmedCases[dataPosition] = value.confirmed;\n        deaths[dataPosition] = value.deaths;\n        recovered[dataPosition] = value.recovered;\n        // backgroundColors[dataPosition] = \"rgba(\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \",0.2\" + \")\";\n        labels[dataPosition] = value.date;\n        // activeCases[dataPosition] =  confirmedCases[dataPosition] - (recovered[dataPosition] + deaths[dataPosition]);\n        dataPosition += 1;\n      }\n    }\n\n    this.setState({\n\n      chartDataTotalCases: {\n\n        labels: labels,\n\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            data: confirmedCases,\n            backgroundColor: 'rgba(65,131,196,0.4)',\n            hidden: false\n          }],\n\n        options: {\n          title: {\n            display: true,\n            text: 'Confirmed Cases'\n          },\n        }\n      },\n\n      chartDataDeathsVsRecovered: {\n\n        labels: labels,\n\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            data: confirmedCases,\n            backgroundColor: 'rgba(65,131,196,0.4)',\n            hidden: true\n          },\n\n          {\n            label: 'Deaths',\n            data: deaths,\n            // backgroundColor: backgroundColors,\n            backgroundColor: 'rgba(249, 54, 80, 0.2)'\n          },\n\n          {\n            label: 'Recovered',\n            data: recovered,\n            // backgroundColor: backgroundColors,\n            backgroundColor: 'rgba(249, 254, 239, 0.9)'\n          }\n\n        ],\n        options: {\n          title: {\n            display: true,\n            text: 'Recoveries VS Deaths'\n          },\n        },\n\n      },\n\n      chartDataActiveCasesLogarithmic: {\n\n        labels: labels,\n\n        datasets: [\n          {\n            label: 'Active Cases (Logarithmic)',\n            data: activeCases,\n            backgroundColor: 'rgba(65,131,196,0.4)',\n            hidden: false\n          }],\n\n        options: {\n          title: {\n            display: true,\n            text: 'Confirmed Cases'\n          },\n          scales: {\n            yAxes: [{\n              type: 'logarithmic'\n            }]\n          }\n        },\n\n      },\n\n      cardsData: {\n        totalCasesWorldWide: 1,\n        activeCasesWorldWide: 1,\n        deceasedWordlWide: 1,\n        dischargedWorldWide: 1,\n        totalCases: confirmedCases[confirmedCases.length - 1],\n        activeCases: confirmedCases[confirmedCases.length - 1] - recovered[recovered.length - 1] - deaths[deaths.length - 1],\n        deceased: deaths[deaths.length - 1],\n        discharged: recovered[recovered.length - 1],\n        newCases: confirmedCases[confirmedCases.length - 1] - confirmedCases[confirmedCases.length - 2],\n        percentageActiveCases: 2\n      },\n\n      countryName: countryName\n    })\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className='mainContainer'>\n          <div className='sidebar countryList'>\n            {this.state.countryList.map(country => {\n              return <Countrylist\n                key={country.countryId}\n                click={() => this.changeCountryHandler(country.countryId, country.countryName, country.countryData)}\n                countryName={country.countryName}\n                countryData={country.countryData}\n              />\n            })\n            }\n\n          </div>\n\n          <div className='chartContainer'>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n            <h1>COVID-19 Cases in {this.state.countryName}</h1>\n\n            <div className='cardsContainer'>\n              <Card\n                title=\"Total Cases\"\n                metrics={this.state.cardsData.totalCases}\n                class=\"card totalCases\"\n              />\n\n              <Card\n                title=\"New Cases in the past 24 Hours\"\n                metrics={this.state.cardsData.newCases}\n                percentage={(this.state.cardsData.newCases * 100 / this.state.cardsData.totalCases).toFixed(2)}\n                class=\"card newCases\"\n              />\n\n              <Card\n                title=\"Active Cases\"\n                metrics={this.state.cardsData.activeCases}\n                percentage={(this.state.cardsData.activeCases * 100 / this.state.cardsData.totalCases).toFixed(2)}\n                class=\"card activeCases\"\n              />\n\n              <Card\n                title=\"Deceased\"\n                metrics={this.state.cardsData.deceased}\n                percentage={(this.state.cardsData.deceased * 100 / this.state.cardsData.totalCases).toFixed(2)}\n                class=\"card deceased\"\n              />\n\n              <Card\n                title=\"Discharged\"\n                metrics={this.state.cardsData.discharged}\n                percentage={((this.state.cardsData.discharged * 100 / this.state.cardsData.totalCases).toFixed(2))}\n                class=\"card discharged\"\n              />\n\n            </div>\n\n            <div className='chartsContainer'>\n\n              <Chart\n                type='Line'\n                backgroundcolor={this.state.chartDataTotalCases.datasets.backgroundColor}\n                label={this.state.chartDataTotalCases.datasets.label}\n                data={this.state.chartDataTotalCases}\n                options={{\n                  legend: {\n                    title: {\n                      display: true,\n                      text: 'Recoveries VS Deaths'\n                    }\n                  },\n\n                  tooltips: {\n                    callbacks: {\n                      label: function (tooltipItem) {\n                        return tooltipItem.yLabel;\n                      }\n                    }\n                  }\n\n                }} />\n\n\n              <Chart\n                type='Line'\n                backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n                label={this.state.chartDataDeathsVsRecovered.datasets.label}\n                data={this.state.chartDataDeathsVsRecovered}\n                options={{\n                  legend: {\n                    title: {\n                      display: true,\n                      text: 'Recoveries VS Deaths'\n                    }\n                  },\n\n                  tooltips: {\n                    callbacks: {\n                      label: function (tooltipItem) {\n                        return tooltipItem.yLabel;\n                      }\n                    }\n                  }\n\n                }} />\n            </div>\n\n            <div className='chartsContainer'>\n\n              <Chart\n                type='Line'\n                backgroundcolor={this.state.chartDataActiveCasesLogarithmic.datasets.backgroundColor}\n                label={this.state.chartDataActiveCasesLogarithmic.datasets.label}\n                data={this.state.chartDataActiveCasesLogarithmic}\n                options={this.state.chartDataActiveCasesLogarithmic.options} />\n            </div>\n\n            <Chart\n              type='Bar'\n              backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n              label={this.state.chartDataDeathsVsRecovered.datasets.label}\n              data={this.state.chartDataDeathsVsRecovered}\n              options={{\n                legend: {\n                  title: {\n                    display: true,\n                    text: 'Recoveries VS Deaths'\n                  }\n                },\n\n                tooltips: {\n                  callbacks: {\n                    label: function (tooltipItem) {\n                      return tooltipItem.yLabel;\n                    }\n                  }\n                }\n\n              }} />\n          </div>\n        </div>\n      </div> //App\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.76a6cc0d.png\";"],"sourceRoot":""}
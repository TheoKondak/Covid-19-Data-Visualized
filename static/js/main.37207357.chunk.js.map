{"version":3,"sources":["components/Burgermenu/BurgerIcon.js","components/Countrylist/Countrylist.js","components/Burgermenu/Menu.js","components/Burgermenu/Burgermenu.js","components/Chart/Chart.js","components/Casecards/Casescard.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["open","props","className","key","Countrylist","onClick","click","countryName","Menu","clickEventHandler","countryId","countryData","close","this","countryList","map","country","Component","styles","fontFamily","textAlign","marginTop","contentStyle","background","width","border","Burgermenu","style","modal","overlayStyle","closeOnDocumentClick","trigger","BurgerIcon","Chart","type","backgroundcolor","label","data","options","title","display","text","height","maintainAspectRatio","Card","class","metrics","percentage","App","state","chartDataTotalCases","labels","datasets","backgroundColor","hidden","chartDataDeathsVsRecovered","chartDataActiveCasesLogarithmic","scales","yAxes","cardsData","totalCases","activeCases","deceased","discharged","newCases","percentageActiveCases","changeCountryHandler","confirmedCases","deaths","recovered","dataPosition","Object","entries","value","confirmed","date","setState","totalCasesWorldWide","activeCasesWorldWide","deceasedWordlWide","dischargedWorldWide","length","xhr","XMLHttpRequest","responseType","onload","defaultCountry","response","US","countryListArray","itterator","push","send","src","logo","alt","legend","tooltips","callbacks","tooltipItem","yLabel","toFixed","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.37207357.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default ({ open, ...props }) => (\r\n  <div className={open ? \"burger-menu open\" : \"burger-menu\"} {...props}>\r\n    <div className=\"bar1\" key=\"b1\" />\r\n    <div className=\"bar2\" key=\"b2\" />\r\n    <div className=\"bar3\" key=\"b3\" />\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport './Countrylist.css';\r\n\r\n\r\nconst Countrylist = (props) => {\r\n    //  console.log(props.countryName)\r\n    return (\r\n        <div className='country text-center '>\r\n\r\n            <button className='neomorphic'\r\n                onClick={props.click}>\r\n                {props.countryName}</button>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Countrylist;\r\n","// import React from \"react\";\r\nimport React, { Component } from 'react';\r\nimport Countrylist from '../Countrylist/Countrylist';\r\n\r\nimport './Menu.css';\r\n\r\n\r\n// export default (props) =>{\r\nclass Menu extends Component {\r\n\r\n  clickEventHandler = (countryId, countryName, countryData) => {\r\n    this.props.click(countryId, countryName, countryData);\r\n    this.props.close();\r\n  }\r\n\r\n  render() {\r\n    return (<div className=\"container menu\">\r\n\r\n      <div className='row'>\r\n        <div className='col-10'>\r\n          {this.props.countryList.map(country => {\r\n\r\n            let countryId = [];\r\n            let countryName = [];\r\n            let countryData = [];\r\n\r\n            countryId = country.countryId;\r\n            countryName = country.countryName;\r\n            countryData = country.countryData;\r\n\r\n            return <Countrylist\r\n              key={country.countryId}\r\n              countryName={country.countryName}\r\n              click={() => { this.clickEventHandler(countryId, countryName, countryData); }}\r\n            />\r\n          })\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Menu;","import React from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport BurgerIcon from \"./BurgerIcon\";\r\nimport Menu from \"./Menu\";\r\nimport \"./Burgermenu.css\";\r\n\r\n\r\n\r\nconst styles = {\r\n  fontFamily: \"sans-serif\",\r\n  textAlign: \"center\",\r\n  marginTop: \"40px\"\r\n};\r\nconst contentStyle = {\r\n  background: \"rgba(41,55,55,0.1)\",\r\n  width: \"80%\",\r\n  border: \"none\"\r\n};\r\n\r\n\r\nconst Burgermenu = (props) => {\r\n  return (\r\n    <div style={styles}>\r\n      <Popup\r\n        modal\r\n        overlayStyle={{ background: \"rgba(55,55,55,0.98\" }}\r\n        contentStyle={contentStyle}\r\n        closeOnDocumentClick={true}\r\n        trigger={open => <BurgerIcon open={open} />}\r\n      >\r\n        {close => <Menu\r\n          close={close}\r\n          countryList={props.countryList}\r\n          click={props.click}\r\n        />}\r\n      </Popup>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Burgermenu;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { Line, Doughnut, Bar } from 'react-chartjs-2';\r\nimport \"./Chart.css\";\r\n\r\nclass Chart extends Component {\r\n  render() {\r\n    if (this.props.type === 'Line')\r\n      return (\r\n        <div className=\"Line col-md-6\">\r\n          <Line\r\n            backgroundcolor={this.props.backgroundcolor}\r\n            label={this.props.label}\r\n            data={this.props.data}\r\n            options={{\r\n              title: {\r\n                display: this.props.display,\r\n                text: this.props.text\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      )\r\n\r\n    else if (this.props.type === 'Doughnut')\r\n      return (\r\n        <div className=\"Doughnut col-md-6\">\r\n          <Doughnut\r\n            width={this.props.width}\r\n            height={this.props.height}\r\n            backgroundcolor={this.props.backgroundcolor}\r\n            label={this.props.label}\r\n            data={this.props.data}\r\n            options={{\r\n              maintainAspectRatio: false\r\n            }}\r\n          />\r\n        </div>\r\n      )\r\n\r\n    else if (this.props.type === 'Bar')\r\n      return (\r\n        <div className=\"Doughnut\">\r\n          <Bar\r\n            backgroundcolor={this.props.backgroundcolor}\r\n            label={this.props.label}\r\n            data={this.props.data}\r\n            options={{\r\n              maintainAspectRatio: false\r\n            }}\r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport \"./Casescard.css\"\r\n\r\nconst Card = (props) => {\r\n\r\n    return (\r\n        <div className={props.class}>\r\n            <h3 className='cardTitle'>{props.title}</h3>\r\n            <span className='cardMetrics'>{props.metrics}</span>\r\n            <span className='cardPercentage'><span className='cardPercentage-percentage'>{props.percentage}</span><span className='cardPercentage-text'> of total cases</span></span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// BurgerMenu\nimport Burgermenu from './components/Burgermenu/Burgermenu';\n\n// Components\nimport Chart from './components/Chart/Chart';\nimport Card from './components/Casecards/Casescard';\nimport Countrylist from './components/Countrylist/Countrylist';\n\n\nclass App extends Component {\n  state = {\n\n    chartDataTotalCases: {\n\n      labels: [],\n\n      datasets: [\n        {\n          label: 'Confirmed Cases',\n          data: [],\n          backgroundColor: 'rgba(65,131,196,0.9)',\n          hidden: true\n        }],\n\n      options: {\n        title: {\n          display: true,\n          text: 'Confirmed Cases'\n        },\n      },\n    },\n\n    chartDataDeathsVsRecovered: {\n      labels: [],\n      datasets: [{\n        label: 'Confirmed Cases',\n        data: [],\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      },\n\n      {\n        label: 'Deaths',\n        data: [],\n        backgroundColor: 'rgba(253, 179, 175, 0.8)',\n      },\n\n      {\n        label: 'Recovered',\n        data: [],\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      }],\n\n      options: {\n        title: {\n          display: true,\n          text: 'Recoveries VS Deaths'\n        }\n      }\n    },\n\n    chartDataActiveCasesLogarithmic: {\n\n      labels: [],\n\n      datasets: [\n        {\n          label: 'Confirmed Cases',\n          data: [],\n          backgroundColor: 'rgba(65,131,196,0.4)',\n          hidden: false\n        }],\n\n      options: {\n        title: {\n          display: true,\n          text: 'Confirmed Cases'\n        },\n        scales: {\n          yAxes: [{\n            type: 'logarithmic'\n          }]\n        }\n      },\n    },\n\n    cardsData: {\n      totalCases: 0,\n      activeCases: 0,\n      deceased: 0,\n      discharged: 0,\n      newCases: 0,\n      percentageActiveCases: 0\n    },\n\n    countryList: []\n  }\n\n\n\n  componentDidMount() {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'https://pomber.github.io/covid19/timeseries.json');\n    xhr.responseType = 'json';\n    xhr.onload = () => {\n\n      let defaultCountry = [...xhr.response.US];\n      let countryList = xhr.response;\n      let countryListArray = [];\n      let confirmedCases = [];\n      let activeCases = [];\n      let deaths = [];\n      let recovered = [];\n      let labels = [];\n      let dataPosition = 0;\n      let itterator = 0;\n\n      // Create Country List Object with ID, Country Name , Country Data\n      for (let countryName in countryList) {\n        countryListArray.push({ countryId: itterator, countryName: countryName, countryData: countryList[countryName] });\n        itterator++\n      }\n\n      // Fetched Data Calculations\n      // Calculate for Selected Country\n      for (let [key, value] of Object.entries(defaultCountry)) {\n        if (value.recovered !== 0 || value.deaths !== 0) { // Start Displaying Since the first Death OR the first recovered occured\n          confirmedCases[dataPosition] = value.confirmed;\n          deaths[dataPosition] = value.deaths;\n          recovered[dataPosition] = value.recovered;\n          // backgroundColors[dataPosition] = \"rgba(\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \",0.2\" + \")\";\n          labels[dataPosition] = value.date;\n          dataPosition += 1;\n        }\n      }\n\n      this.setState({\n        //Set Default Country State\n        chartDataTotalCases: {\n\n          labels: labels,\n\n          datasets: [\n            {\n              label: 'Confirmed Cases',\n              data: confirmedCases,\n              backgroundColor: 'rgba(65,131,196,0.4)',\n              hidden: false\n            }],\n\n          options: {\n            title: {\n              display: true,\n              text: 'Confirmed Cases'\n            },\n          }\n        },\n\n        chartDataDeathsVsRecovered: {\n\n          labels: labels,\n\n          datasets: [\n            {\n              label: 'Confirmed Cases',\n              data: confirmedCases,\n              backgroundColor: 'rgba(65,131,196,0.4)',\n              hidden: true\n            },\n\n            {\n              label: 'Deaths',\n              data: deaths,\n              // backgroundColor: backgroundColors,\n              backgroundColor: 'rgba(249, 54, 80, 0.2)'\n            },\n\n            {\n              label: 'Recovered',\n              data: recovered,\n              // backgroundColor: backgroundColors,\n              backgroundColor: 'rgba(249, 254, 239, 0.9)'\n            }\n\n          ],\n          options: {\n            title: {\n              display: true,\n              text: 'Recoveries VS Deaths'\n            },\n          },\n\n        },\n\n        chartDataActiveCasesLogarithmic: {\n\n          labels: labels,\n\n          datasets: [\n            {\n              label: 'Active Cases (Logarithmic)',\n              data: activeCases,\n              backgroundColor: 'rgba(65,131,196,0.4)',\n              hidden: false\n            }],\n\n          options: {\n            title: {\n              display: true,\n              text: 'Confirmed Cases'\n            },\n            scales: {\n              yAxes: [{\n                type: 'logarithmic'\n              }]\n            }\n          },\n\n        },\n\n        cardsData: {\n          totalCasesWorldWide: 1,\n          activeCasesWorldWide: 1,\n          deceasedWordlWide: 1,\n          dischargedWorldWide: 1,\n          totalCases: confirmedCases[confirmedCases.length - 1],\n          activeCases: confirmedCases[confirmedCases.length - 1] - recovered[recovered.length - 1] - deaths[deaths.length - 1],\n          deceased: deaths[deaths.length - 1],\n          discharged: recovered[recovered.length - 1],\n          newCases: confirmedCases[confirmedCases.length - 1] - confirmedCases[confirmedCases.length - 2],\n          percentageActiveCases: 2\n        },\n\n        countryName: 'USA',\n\n        countryList: countryListArray\n      })\n    };\n    xhr.send();\n  }\n\n  changeCountryHandler = (countryId, countryName, countryData) => {\n    let confirmedCases = [];\n    let activeCases = [];\n    let deaths = [];\n    let recovered = [];\n    let labels = [];\n    let dataPosition = 0;\n\n\n    // Fetched Data Calculations\n    // Calculate for Selected Country\n    for (let [key, value] of Object.entries(countryData)) {\n      // if (value.recovered !== 0 || value.deaths !== 0) { // Start Displaying Since the first Death OR the first recovered occured\n      confirmedCases[dataPosition] = value.confirmed;\n      deaths[dataPosition] = value.deaths;\n      recovered[dataPosition] = value.recovered;\n      // backgroundColors[dataPosition] = \"rgba(\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \",\" + Math.floor(Math.random() * 256) + \",0.2\" + \")\";\n      labels[dataPosition] = value.date;\n      // activeCases[dataPosition] =  confirmedCases[dataPosition] - (recovered[dataPosition] + deaths[dataPosition]);\n      dataPosition += 1;\n      // }\n\n    }\n\n\n\n    this.setState({\n\n      chartDataTotalCases: {\n\n        labels: labels,\n\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            data: confirmedCases,\n            backgroundColor: 'rgba(65,131,196,0.4)',\n            hidden: false\n          }],\n\n        options: {\n          title: {\n            display: true,\n            text: 'Confirmed Cases'\n          },\n        }\n      },\n\n      chartDataDeathsVsRecovered: {\n\n        labels: labels,\n\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            data: confirmedCases,\n            backgroundColor: 'rgba(65,131,196,0.4)',\n            hidden: true\n          },\n\n          {\n            label: 'Deaths',\n            data: deaths,\n            // backgroundColor: backgroundColors,\n            backgroundColor: 'rgba(249, 54, 80, 0.2)'\n          },\n\n          {\n            label: 'Recovered',\n            data: recovered,\n            // backgroundColor: backgroundColors,\n            backgroundColor: 'rgba(249, 254, 239, 0.9)'\n          }\n\n        ],\n        options: {\n          title: {\n            display: true,\n            text: 'Recoveries VS Deaths'\n          },\n        },\n\n      },\n\n      chartDataActiveCasesLogarithmic: {\n\n        labels: labels,\n\n        datasets: [\n          {\n            label: 'Active Cases (Logarithmic)',\n            data: activeCases,\n            backgroundColor: 'rgba(65,131,196,0.4)',\n            hidden: false\n          }],\n\n        options: {\n          title: {\n            display: true,\n            text: 'Confirmed Cases'\n          },\n          scales: {\n            yAxes: [{\n              type: 'logarithmic'\n            }]\n          }\n        },\n\n      },\n\n      cardsData: {\n        totalCasesWorldWide: 1,\n        activeCasesWorldWide: 1,\n        deceasedWordlWide: 1,\n        dischargedWorldWide: 1,\n        totalCases: confirmedCases[confirmedCases.length - 1],\n        activeCases: confirmedCases[confirmedCases.length - 1] - recovered[recovered.length - 1] - deaths[deaths.length - 1],\n        deceased: deaths[deaths.length - 1],\n        discharged: recovered[recovered.length - 1],\n        newCases: confirmedCases[confirmedCases.length - 1] - confirmedCases[confirmedCases.length - 2],\n        percentageActiveCases: 2\n      },\n\n      countryName: countryName\n    })\n\n  }\n\n  render() {\n\n\n  \n\n\n    return (\n      <div className=\"container-fluid app-container \">\n\n        {/* Header */}\n        <div className=\"row col-md-8 header mx-auto mb-5\">\n          <div className='logo-container'>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n          <h1>COVID-19 Cases in {this.state.countryName}</h1>\n          <small>Last Update: {this.state.chartDataTotalCases.labels[this.state.chartDataTotalCases.labels.length - 1]}</small>\n        </div>\n\n\n        {/* Cards */}\n        <div className='row col-md-12 mx-auto mb-4 cardsContainer'>\n\n          <div className='col-md-4 mb-2 cardContainer'>\n            <Card\n              title=\"Total Cases\"\n              metrics={this.state.cardsData.totalCases}\n              class=\"card totalCases\"\n\n              // Chart\n              type='Line'\n              backgroundcolor={this.state.chartDataTotalCases.datasets.backgroundColor}\n              label={this.state.chartDataTotalCases.datasets.label}\n              data={this.state.chartDataTotalCases}\n              options={{\n                legend: {\n                  title: {\n                    display: true,\n                    text: 'Recoveries VS Deaths'\n                  }\n                },\n\n                tooltips: {\n                  callbacks: {\n                    label: function (tooltipItem) {\n                      return tooltipItem.yLabel;\n                    }\n                  }\n                }\n\n              }}\n\n            >   </Card>\n          </div>\n\n          <div className='col-md-4 mb-2 cardContainer'>\n            <Card\n              title=\"New Cases\"\n              metrics={this.state.cardsData.newCases}\n              percentage={(this.state.cardsData.newCases * 100 / this.state.cardsData.totalCases).toFixed(2)}\n              class=\"card newCases\"\n            />\n          </div>\n\n          <div className='col-md-4 mb-2 cardContainer'>\n            <Card\n              title=\"Active Cases\"\n              metrics={this.state.cardsData.activeCases}\n              percentage={(this.state.cardsData.activeCases * 100 / this.state.cardsData.totalCases).toFixed(2)}\n              class=\"card activeCases\"\n            />\n          </div>\n\n          <div className='col-md-4 mb-2 cardContainer'>\n            <Card\n              title=\"Deceased\"\n              metrics={this.state.cardsData.deceased}\n              percentage={(this.state.cardsData.deceased * 100 / this.state.cardsData.totalCases).toFixed(2)}\n              class=\"card deceased\"\n            />\n          </div>\n\n          <div className='col-md-4 mb-2 cardContainer'>\n            <Card\n              title=\"Discharged\"\n              metrics={this.state.cardsData.discharged}\n              percentage={((this.state.cardsData.discharged * 100 / this.state.cardsData.totalCases).toFixed(2))}\n              class=\"card discharged\"\n            />\n          </div>\n\n        </div>\n\n\n        {/* Charts */}\n        <div className='row col-md-12 chartsContainer'>\n\n          <Chart\n            type='Line'\n            backgroundcolor={this.state.chartDataTotalCases.datasets.backgroundColor}\n            label={this.state.chartDataTotalCases.datasets.label}\n            data={this.state.chartDataTotalCases}\n            options={{\n              legend: {\n                title: {\n                  display: true,\n                  text: 'Recoveries VS Deaths'\n                }\n              },\n\n              tooltips: {\n                callbacks: {\n                  label: function (tooltipItem) {\n                    return tooltipItem.yLabel;\n                  }\n                }\n              }\n\n            }} />\n\n          <Chart\n            type='Line'\n            backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n            label={this.state.chartDataDeathsVsRecovered.datasets.label}\n            data={this.state.chartDataDeathsVsRecovered}\n            options={{\n              legend: {\n                title: {\n                  display: true,\n                  text: 'Recoveries VS Deaths'\n                }\n              },\n\n              tooltips: {\n                callbacks: {\n                  label: function (tooltipItem) {\n                    return tooltipItem.yLabel;\n                  }\n                }\n              }\n\n            }} />\n        </div>\n\n\n        {/* Charts */}\n        <div className='row col-md-12 chartsContainer'>\n          <Chart\n            type='Line'\n            backgroundcolor={this.state.chartDataActiveCasesLogarithmic.datasets.backgroundColor}\n            label={this.state.chartDataActiveCasesLogarithmic.datasets.label}\n            data={this.state.chartDataActiveCasesLogarithmic}\n            options={this.state.chartDataActiveCasesLogarithmic.options} />\n\n\n          <Chart\n            type='Bar'\n            backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n            label={this.state.chartDataDeathsVsRecovered.datasets.label}\n            data={this.state.chartDataDeathsVsRecovered}\n            options={{\n              legend: {\n                title: {\n                  display: true,\n                  text: 'Recoveries VS Deaths'\n                }\n              },\n\n              tooltips: {\n                callbacks: {\n                  label: function (tooltipItem) {\n                    return tooltipItem.yLabel;\n                  }\n                }\n              }\n\n            }} />\n        </div>\n\n\n        {/* Burger Menu */}\n        <div className='cardContainer countryList'>\n          <Burgermenu\n            countryList={this.state.countryList}\n            click={this.changeCountryHandler}\n          />\n        </div>\n\n\n        {/* Footer */}\n        <div className='container footer'>\n          <div className='row'>\n            <hr className='col-12 footer-hr' />\n            <div className='col-12'>\n              <p>Find the code of the project on <a href='https://github.com/TheoKondak/covid-19-cata-visualized' target='_blank' title='Find project on GitHub'>GitHub</a></p>\n              <p>This project is created with\n            <br />\n                <a href='https://github.com/facebook/create-react-app#readme' target='_blank' title='React Chart js 2'>React</a>\n                <br />\n                <a href='https://github.com/jerairrest/react-chartjs-2' target='_blank' title='React Chart js 2'>React Chart js 2</a>\n                <br />\n                <a href='https://github.com/yjose/reactjs-popup-burger-menu' target='_blank' title='React JS popup burger menu'>React js popup burger menu</a>\n              </p>\n              <p>\n                Copyright 2020 Theodoros Kondakos. All rights reserved\n            <a href='https://github.com/TheoKondak/Covid-19-Data-Visualized/blob/master/LICENSE' target='_blank' rel='noopener noreferrer' title='Fight Covid-19 with Folding @home'> View Licence information</a>\n              </p>\n            </div>\n\n          </div>\n\n\n\n        </div>\n\n      </div> //App\n\n\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.76a6cc0d.png\";"],"sourceRoot":""}
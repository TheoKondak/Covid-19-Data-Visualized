{"version":3,"sources":["components/Casecards/sort-down-solid.svg","components/Burgermenu/BurgerIcon.js","components/Countrylist/Countrylist.js","components/Searchbar/Searchbar.js","components/Burgermenu/Menu.js","components/Burgermenu/Burgermenu.js","components/Searchbar/Searchbardesktop.js","components/Chart/Chart.js","components/Casecards/Casescard.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["module","exports","open","props","className","key","Countrylist","onClick","click","countryName","Searchbar","clickEventHandler","countryId","countryData","close","state","search","event","this","setState","target","value","toLowerCase","substring","filteredCountries","countryList","map","country","filter","indexOf","type","placeholder","onChange","updateSearch","bind","React","Component","Menu","console","log","id","styles","fontFamily","textAlign","marginTop","contentStyle","background","width","border","Burgermenu","style","modal","overlayStyle","closeOnDocumentClick","trigger","BurgerIcon","Searchbardesktop","Chart","label","data","options","Card","class","title","metrics","percentage","src","require","green","App","confirmedCases","labels","datasets","backgroundColor","hidden","display","text","chartDataDeathsVsRecovered","chartDataActiveCasesLogarithmic","cardsData","totalCases","activeCases","deceased","discharged","newCases","percentageActiveCases","cardsChartsData","cardsChartsNewCases","cardsChartsActiveCases","cardsChartsDeaths","cardsChartsRecovered","countryListArrayBurgerMenu","changeCountryHandler","deaths","recovered","activeCasesLogarithmic","cardsChartNewCases","cardsChartActiveCases","cardsChartDeaths","cardsChartRecovered","dataPosition","Object","entries","confirmed","date","totalCasesWorldWide","activeCasesWorldWide","deceasedWordlWide","dischargedWorldWide","length","xhr","XMLHttpRequest","responseType","onload","response","itterator","globalData","confirmedCasesLogarithmic","deceasedLogarithmic","recoveredLogarithmic","cardConfirmed","cardDeceased","cardRecovered","cardNewCases","cardActiveCases","newCasesPrevDay","resConfirmed","values","reduce","acc","curr","forEach","item","push","resDeceased","resRecovered","i","send","OverlayTrigger","rootClose","placement","overlay","Popover","PopoverTitle","as","PopoverContent","variant","legend","scales","xAxes","yAxes","elements","point","radius","tooltips","enabled","maintainAspectRatio","toFixed","Tabs","defaultActiveKey","Tab","eventKey","backgroundcolor","callbacks","tooltipItem","yLabel","ticks","autoSkip","maxTicksLimit","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8af36e1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sort-down-solid.63fbce54.svg\";","import React from \"react\";\r\n\r\n\r\n\r\nexport default ({ open, ...props }) => (\r\n \r\n <div className='burger-menu-container d-xl-none'>\r\n <div className={open ? \"burger-menu open\" : \"burger-menu\"} {...props}>\r\n    <div className=\"bar1\" key=\"b1\" />\r\n    <div className=\"bar2\" key=\"b2\" />\r\n    <div className=\"bar3\" key=\"b3\" />\r\n  </div>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport './Countrylist.scss';\r\n\r\n\r\nconst Countrylist = (props) => {\r\n    \r\n    return (\r\n        <div className='text-center '>\r\n\r\n<div className='countryItem'>\r\n            <button className='countryItemBtn' onClick={props.click}>\r\n                {props.countryName}</button>\r\n                </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Countrylist;\r\n","import React, { Component } from 'react';\r\nimport Countrylist from '../Countrylist/Countrylist';\r\n\r\nimport './Searchbar.scss';\r\n\r\n\r\n\r\nclass Searchbar extends React.Component {\r\n\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            search: ''\r\n        };\r\n    }\r\n\r\n\r\n\r\n    \r\n    clickEventHandler = (countryId, countryName, countryData) => {\r\n        this.props.click(countryId, countryName, countryData); \r\n        this.props.close();\r\n      }\r\n    \r\n    updateSearch(event){\r\n        this.setState({search: event.target.value.toLowerCase().substring(0, 25)})\r\n    };\r\n    \r\n    render() {\r\n        \r\n        let listOfCountries = this.props.countryList.map(country => {\r\n            return country;\r\n        })\r\n        \r\n        let filteredCountries = listOfCountries.filter(country => {\r\n           return country.countryName.toLowerCase().indexOf(this.state.search) !== -1;\r\n        })\r\n        \r\n\r\n\r\n        return (\r\n            <div className='searchBar'>\r\n<div className='header'>\r\n <h3 className='searchBar-h3 pt-4 '>Covid-19 Data Visualized</h3>\r\n <small>v0.4a</small>\r\n </div>\r\n\r\n\r\n<hr className='searchBar-hr' />\r\n\r\n                <input \r\n                    className='searchCountry'\r\n                    type='text'\r\n                    placeholder=\"Search for a country\"\r\n                    value={this.state.search}\r\n                    onChange={this.updateSearch.bind(this)}\r\n                />\r\n\r\n                <hr className='searchBar-hr' />\r\n\r\n        <div className='countryList'>{filteredCountries.map(country => {\r\n        return <Countrylist \r\n            key={country.countryName}\r\n            countryName={country.countryName} \r\n            click={() => { this.clickEventHandler(country.countryId, country.countryName, country.countryData); }}\r\n           \r\n            />\r\n        })}\r\n        </div>\r\n     \r\n            </div>\r\n\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Searchbar;\r\n\r\n","// import React from \"react\";\r\nimport React, { Component } from 'react';\r\nimport Countrylist from '../Countrylist/Countrylist';\r\nimport Searchbar from '../Searchbar/Searchbar';\r\n\r\nimport './Menu.scss';\r\n\r\n\r\n// export default (props) =>{\r\nclass Menu extends Component {\r\n\r\n  clickEventHandler = (countryId, countryName, countryData) => {\r\n    this.props.click(countryId, countryName, countryData);\r\n    this.props.close();\r\n    \r\n  }\r\n\r\n  render() {\r\n\r\n    console.log(this.props);\r\n    return (\r\n    \r\n   \r\n    \r\n    <div className='burgerMenuContainer'>\r\n\r\n \r\n\r\n\r\n<div className=\"menu clear\" id='grid'>\r\n   \r\n          {/* {this.props.countryList.map(country => {\r\n\r\n            let countryId = [];\r\n            let countryName = [];\r\n            let countryData = [];\r\n\r\n            countryId = country.countryId;\r\n            countryName = country.countryName;\r\n            countryData = country.countryData;\r\n\r\n            return <Countrylist\r\n              key={country.countryId}\r\n              countryName={country.countryName}\r\n              click={() => { this.clickEventHandler(countryId, countryName, countryData); }}\r\n            />\r\n          })\r\n          } */}\r\n\r\n<Searchbar\r\n              countryList={this.props.countryList}\r\n              click={this.props.click}\r\n              close={this.props.close}\r\n            />\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n  \r\n    )\r\n  }\r\n};\r\n\r\nexport default Menu;","import React from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport BurgerIcon from \"./BurgerIcon\";\r\nimport Menu from \"./Menu\";\r\nimport \"./Burgermenu.scss\";\r\n\r\n\r\n\r\nconst styles = {\r\n  fontFamily: \"sans-serif\",\r\n  textAlign: \"center\",\r\n  marginTop: \"40px\"\r\n};\r\nconst contentStyle = {\r\n  background: \"rgba(231, 232, 236, 0.1)\",\r\n  width: \"100vw\",\r\n  border: \"none\"\r\n};\r\n\r\n\r\nconst Burgermenu = (props) => {\r\n//   console.log('Country List:');\r\n// console.log(props.countryList);\r\n\r\n\r\n\r\n  return (\r\n    <div style={styles}>\r\n      <Popup\r\n        modal\r\n        overlayStyle={{ background: \"rgba(231, 232, 236, 0.1)\" }}\r\n        contentStyle={contentStyle}\r\n        closeOnDocumentClick={true}\r\n        trigger={open => <BurgerIcon open={open} />}\r\n      >\r\n        {close => <   Menu\r\n          close={close}\r\n          countryList={props.countryList}\r\n\r\n          \r\n          click={props.click}\r\n        />}\r\n      </Popup>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Burgermenu;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport Countrylist from '../Countrylist/Countrylist';\r\n\r\nimport './Searchbar.scss';\r\n\r\n\r\n\r\nclass Searchbardesktop extends React.Component {\r\n\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            search: ''\r\n        };\r\n    }\r\n\r\n\r\n\r\n    \r\n    clickEventHandler = (countryId, countryName, countryData) => {\r\n        this.props.click(countryId, countryName, countryData); \r\n        \r\n      }\r\n    \r\n    updateSearch(event){\r\n        this.setState({search: event.target.value.toLowerCase().substring(0, 25)})\r\n    };\r\n    \r\n    render() {\r\n        \r\n        let listOfCountries = this.props.countryList.map(country => {\r\n            return country;\r\n        })\r\n        \r\n        let filteredCountries = listOfCountries.filter(country => {\r\n           return country.countryName.toLowerCase().indexOf(this.state.search) !== -1;\r\n        })\r\n        \r\n\r\n\r\n        return (\r\n            <div className='searchBar'>\r\n<div className='header'>\r\n <h3 className='searchBar-h3 pt-4 '>Covid-19 Data Visualized</h3>\r\n <small>v0.4a</small>\r\n </div>\r\n\r\n\r\n<hr className='searchBar-hr' />\r\n\r\n                <input \r\n                    className='searchCountry'\r\n                    type='text'\r\n                    placeholder=\"Search for a country\"\r\n                    value={this.state.search}\r\n                    onChange={this.updateSearch.bind(this)}\r\n                />\r\n\r\n                <hr className='searchBar-hr' />\r\n\r\n        <div className='countryList'>{filteredCountries.map(country => {\r\n        return <Countrylist \r\n            key={country.countryName}\r\n            countryName={country.countryName} \r\n            click={() => { this.clickEventHandler(country.countryId, country.countryName, country.countryData); }}\r\n           \r\n            />\r\n        })}\r\n        </div>\r\n     \r\n            </div>\r\n\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Searchbardesktop;\r\n\r\n","import React, { Component } from 'react';\r\nimport { Line, Doughnut, Bar } from 'react-chartjs-2';\r\nimport \"./Chart.scss\";\r\n\r\nclass Chart extends Component {\r\n\r\n  \r\n  render() {\r\n\r\n// console.log(this.props.data)\r\n\r\n    if (this.props.type === 'Line')\r\n      return (\r\n        <div className=\"Line\">\r\n          <Line\r\n            label={this.props.label}\r\n            data={this.props.data}\r\n            options={this.props.options}\r\n          />\r\n        </div>\r\n      )\r\n\r\n    else if (this.props.type === 'Doughnut')\r\n      return (\r\n        <div className=\"Doughnut\">\r\n          <Doughnut\r\n            label={this.props.label}\r\n            data={this.props.data}\r\n            options={this.props.options}\r\n          />\r\n        </div>\r\n      )\r\n\r\n    else if (this.props.type === 'Bar')\r\n      return (\r\n        <div className=\"Bar\">\r\n          <Bar\r\n            label={this.props.label}\r\n            data={this.props.data}\r\n            options={this.props.options}\r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\n\r\nimport \"./Casescard.scss\"\r\n\r\nimport Chart from '../Chart/Chart';\r\n\r\nconst Card = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className={props.class}>\r\n\r\n\r\n            <div className='title-metrics-container'>\r\n                <div className='containerTitle'>\r\n                    <h3 className='cardTitle'>{props.title}</h3>\r\n                </div>\r\n\r\n                <div className='containerMetrics'>\r\n                    <span className='cardMetrics'>{props.metrics}</span>\r\n                    <div className='cardPercentage'>\r\n                        <span className='cardPercentage-percentage'>{props.percentage}</span>\r\n                        {/* <span className='cardPercentage-text'> of total cases</span> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className='containerMetricsChart'>\r\n                <Chart\r\n                    type={props.type}\r\n\r\n\r\n                    data={props.data}\r\n                    options={props.options}\r\n                />\r\n            </div>\r\n            <hr className='hrCaseCard' />\r\n            <div className='fontAwesome-downArrow-container'>\r\n                <img src={require('./sort-down-solid.svg')} className='shortDownSolid' />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Tabs, Tab, OverlayTrigger, Popover, PopoverTitle, PopoverContent } from 'react-bootstrap';\n\n\n\n// BurgerMenu\nimport Burgermenu from './components/Burgermenu/Burgermenu';\n\n//SearchBar\nimport Searchbar from './components/Searchbar/Searchbar';\nimport Searchbardesktop from './components/Searchbar/Searchbardesktop'\n\n// Components\nimport Chart from './components/Chart/Chart';\nimport Card from './components/Casecards/Casescard';\n// import PopoverCustom from './components/Popover/Popover';\n\nconst green = 'rgba(40, 167, 69,1)';\n\n\n\nclass App extends Component {\n  state = {\n\n    confirmedCases: {\n\n      labels: [],\n\n      datasets: [\n        {\n          label: 'Confirmed Cases',\n          data: [],\n          backgroundColor: 'rgba(65,131,196,0.9)',\n          hidden: true\n        }],\n\n      options: {\n        title: {\n          display: true,\n          text: 'Confirmed Cases'\n        },\n      },\n    },\n\n    chartDataDeathsVsRecovered: {\n      labels: [],\n      datasets: [{\n        label: 'Confirmed Cases',\n        data: [],\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      },\n\n      {\n        label: 'Deaths',\n        data: [],\n        backgroundColor: 'rgba(253, 179, 175, 0.8)',\n      },\n\n      {\n        label: 'Recovered',\n        data: [],\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      }],\n\n      options: {\n        title: {\n          display: true,\n          text: 'Recoveries VS Deaths'\n        }\n      }\n    },\n\n    chartDataActiveCasesLogarithmic: {\n\n      labels: [],\n\n      datasets: [\n        {\n          label: 'Confirmed Cases',\n          data: [],\n          backgroundColor: green,\n          hidden: false\n        }],\n\n\n    },\n\n    cardsData: {\n      totalCases: 0,\n      activeCases: 0,\n      deceased: 0,\n      discharged: 0,\n      newCases: 0,\n      percentageActiveCases: 0\n    },\n\n    cardsChartsData: {\n\n      cardsChartsNewCases: {\n        labels: '',\n        datasets: [\n          {\n            label: '',\n            data: [],\n            backgroundColor: 'rgba(220,53,69,0.9)'\n          }]\n      },\n\n      cardsChartsActiveCases: {\n        labels: '',\n        datasets: [\n          {\n            label: '',\n            data: [],\n            backgroundColor: 'rgba(220,53,69,0.9)'\n          }]\n      },\n\n      cardsChartsDeaths: {\n        labels: '',\n        datasets: [\n          {\n            label: '',\n            data: [],\n            backgroundColor: 'rgba(220,53,69,0.9)'\n          }]\n      },\n\n      cardsChartsRecovered: {\n        labels: '',\n        datasets: [\n          {\n            label: '',\n            data: [],\n            backgroundColor: 'rgba(220,53,69,0.9)'\n          }]\n      }\n\n    },\n\n    countryListArrayBurgerMenu: []\n  }\n\n  componentDidMount() {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'https://pomber.github.io/covid19/timeseries.json');\n    xhr.responseType = 'json';\n    xhr.onload = () => {\n\n      // let defaultCountry = [...xhr.response.US];\n      let countryList = xhr.response;\n      let countryListArrayBurgerMenu = [];\n      let itterator = 0;\n\n      let globalData = {\n        labels: [],\n        confirmedCases: [],\n        deceased: [],\n        recovered: [],\n        newCases: [],\n        activeCases: [],\n\n        //Logarithmic\n        confirmedCasesLogarithmic: [],\n        activeCasesLogarithmic: [],\n        deceasedLogarithmic: [],\n        recoveredLogarithmic: [],\n\n        //Cards\n        cardConfirmed: 0,\n        cardDeceased: 0,\n        cardRecovered: 0,\n        cardNewCases: 0,\n        cardActiveCases: 0,\n\n        //Previous Date\n        newCasesPrevDay: 0\n      }\n\n\n\n      // Calculate Global Confirmed Cases\n      const resConfirmed = Object.values(countryList).reduce((acc, curr) => {\n        curr.forEach(item => {\n          acc[item.date] = (acc[item.date] || 0) + item.confirmed;\n        });\n        return acc;\n      }, {});\n\n      for (let [key, value] of Object.entries(resConfirmed)) {\n        globalData.confirmedCases.push(value);\n      }\n\n\n      // Calculate Global Deceased\n      const resDeceased = Object.values(countryList).reduce((acc, curr) => {\n        curr.forEach(item => {\n          acc[item.date] = (acc[item.date] || 0) + item.deaths;\n        });\n        return acc;\n      }, {});\n\n      for (let [key, value] of Object.entries(resDeceased)) {\n        globalData.deceased.push(value);\n      }\n\n\n\n      // Calculate Global Recovered\n      const resRecovered = Object.values(countryList).reduce((acc, curr) => {\n        curr.forEach(item => {\n          acc[item.date] = (acc[item.date] || 0) + item.recovered;\n        });\n        return acc;\n      }, {});\n\n      for (let [key, value] of Object.entries(resRecovered)) {\n        globalData.recovered.push(value);\n      }\n\n\n\n      //Calculate New Cases\n      for (let i = 0; i < globalData.confirmedCases.length; i++) {\n        globalData.newCases[i] = globalData.confirmedCases[i] - (globalData.confirmedCases[i - 1] || globalData.confirmedCases[i]);\n      }\n\n      //Calculate Active Cases\n      for (let i = 0; i < globalData.confirmedCases.length; i++) {\n        globalData.activeCases[i] = globalData.confirmedCases[i] - (globalData.recovered[i] - globalData.deceased[i]);\n      }\n\n      //Labels\n      for (let [key, value] of Object.entries(countryList)) {\n        if (key === \"US\") {\n          for (let date in value) globalData.labels.push(value[date].date);\n        }\n\n        //Cards \n        globalData.cardConfirmed += value[value.length - 1].confirmed;\n        globalData.cardDeceased += value[value.length - 1].deaths;\n        globalData.cardRecovered += value[value.length - 1].recovered;\n        globalData.newCasesPrevDay += value[value.length - 2].confirmed;\n        globalData.cardActiveCases = globalData.cardConfirmed - (globalData.cardRecovered - globalData.deceased)\n      }\n\n      globalData.cardNewCases = globalData.cardConfirmed - globalData.newCasesPrevDay;\n      globalData.cardActiveCases = globalData.cardConfirmed - (globalData.cardDeceased + globalData.cardRecovered);\n\n      // console.log('Global Data Confirmed Cases: ');\n      // console.log(globalData.confirmedCases);\n\n      // Create Country List Object with ID, Country Name , Country Data\n      for (let countryName in countryList) {\n        countryListArrayBurgerMenu.push({ countryId: itterator, countryName: countryName, countryData: countryList[countryName] });\n        //  console.log('Itteration: ' + countryName);\n        //   console.log(countryList[countryName]);\n        itterator++\n      }\n\n      this.setState({\n        //Default option = Global Data\n        confirmedCases: {\n\n          labels: globalData.labels,\n\n          datasets: [\n            {\n              label: 'Confirmed Cases',\n              data: globalData.confirmedCases,\n              backgroundColor: 'rgba(65,131,196,0.4)',\n              hidden: false\n            }]\n        },\n\n        chartDataDeathsVsRecovered: {\n\n          labels: globalData.labels,\n\n          datasets: [\n            {\n              label: 'Confirmed Cases',\n              data: globalData.confirmedCases,\n              backgroundColor: 'rgba(65,131,196,0.4)',\n              hidden: true\n            },\n\n            {\n              label: 'Deaths',\n              data: globalData.deceased,\n              // backgroundColor: backgroundColors,\n              backgroundColor: 'rgba(249, 54, 80, 0.2)'\n            },\n\n            {\n              label: 'Recovered',\n              data: globalData.recovered,\n              // backgroundColor: backgroundColors,\n              backgroundColor: 'rgba(40, 167, 69, .9)'\n            }\n\n          ],\n          options: {\n            title: {\n              display: true,\n              text: 'Recoveries VS Deaths'\n            },\n          },\n\n        },\n\n        chartDataActiveCasesLogarithmic: {\n\n          labels: globalData.labels,\n\n          datasets: [\n            {\n              label: 'Active Cases (Logarithmic)',\n              data: globalData.activeCases,\n              backgroundColor: green,\n              hidden: false\n            }],\n\n\n\n        },\n\n        cardsData: {\n          // totalCasesWorldWide: 1,\n          // activeCasesWorldWide: 1,\n          // deceasedWordlWide: 1,\n          // dischargedWorldWide: 1,\n          totalCases: globalData.cardConfirmed,\n          activeCases: globalData.cardActiveCases,\n          deceased: globalData.cardDeceased,\n          discharged: globalData.cardRecovered,\n          newCases: globalData.cardNewCases,\n          // percentageActiveCases: 2\n        },\n\n        cardsChartsData: {\n\n          cardsChartsNewCases: {\n            labels: globalData.labels,\n            datasets: [\n              {\n                label: '',\n                data: globalData.newCases,\n                backgroundColor: () => {\n                  return (globalData.newCases[globalData.newCases.length - 1] > globalData.newCases[globalData.newCases.length - 2]) ? 'rgba(220,53,69,0.9)' : 'rgba(40, 167, 69,1)';\n                }\n              }]\n          },\n\n          cardsChartsActiveCases: {\n            labels: globalData.labels,\n            datasets: [\n              {\n                label: '',\n                data: globalData.activeCases,\n                backgroundColor: () => {\n                  return (globalData.activeCases[globalData.activeCases.length - 1] > globalData.activeCases[globalData.activeCases.length - 2]) ? 'rgba(220,53,69,0.9)' : 'rgba(40, 167, 69, 0.9)';\n                }\n              }]\n          },\n          cardsChartsDeaths: {\n            labels: globalData.labels,\n            datasets: [\n              {\n                label: '',\n                data: globalData.deceased,\n                backgroundColor: () => {\n                  return (globalData.deceased[globalData.deceased.length - 1] > globalData.deceased[globalData.deceased.length - 2]) ? 'rgba(220,53,69,0.9)' : 'rgba(40, 167, 69, 0.9)';\n                }\n              }]\n          },\n\n          cardsChartsRecovered: {\n            labels: globalData.labels,\n            datasets: [\n              {\n                label: '',\n                data: globalData.recovered,\n                backgroundColor: () => {\n                  return (globalData.recovered[globalData.recovered.length - 1] > globalData.recovered[globalData.recovered.length - 2]) ? 'rgba(40, 167, 69, 0.9)' : 'rgba(220,53,69,0.9)';\n                }\n              }]\n          }\n        },\n\n        countryName: 'Global Data',\n\n        countryListArrayBurgerMenu: countryListArrayBurgerMenu\n      })\n    };\n    xhr.send();\n\n\n  }\n\n\n\n  changeCountryHandler = (countryId, countryName, countryData) => {\n    let confirmedCases = [];\n    let deaths = [];\n    let recovered = [];\n    let labels = [];\n    let activeCasesLogarithmic = [];\n    let cardsChartNewCases = [];\n    let cardsChartActiveCases = [];\n    let cardsChartDeaths = [];\n    let cardsChartRecovered = [];\n    let dataPosition = 0;\n\n    // Fetched Data Calculations\n    // Calculate for Selected Country\n    for (let [key, value] of Object.entries(countryData)) {\n      if (value.recovered !== 0 || value.deaths !== 0) { // Start Displaying Since the first Death OR the first recovered occured\n        confirmedCases[dataPosition] = value.confirmed;\n        deaths[dataPosition] = value.deaths;\n        recovered[dataPosition] = value.recovered;\n        labels[dataPosition] = value.date;\n\n        activeCasesLogarithmic[dataPosition] = value.confirmed - (value.deaths + value.recovered);\n        // Calculations for Charts for cards\n        cardsChartNewCases[dataPosition] = confirmedCases[dataPosition] - confirmedCases[dataPosition - 1];\n        cardsChartActiveCases[dataPosition] = value.confirmed - (value.deaths + value.recovered);;\n        cardsChartDeaths[dataPosition] = deaths[dataPosition] - deaths[dataPosition - 1];\n        // cardsChartRecovered[dataPosition] = recovered[dataPosition] - recovered[dataPosition - 1];\n        if (dataPosition === 0) cardsChartRecovered[dataPosition] = 0;\n        else cardsChartRecovered[dataPosition] = recovered[dataPosition] - recovered[dataPosition - 1];\n        dataPosition += 1;\n      }\n    }\n\n    this.setState({\n\n      confirmedCases: {\n\n        labels: labels,\n\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            data: confirmedCases,\n            backgroundColor: 'rgba(65,131,196,0.4)',\n            hidden: false\n          }],\n\n        options: {\n          title: {\n            display: true,\n            text: 'Confirmed Cases'\n          },\n        }\n      },\n\n      chartDataDeathsVsRecovered: {\n\n        labels: labels,\n\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            data: confirmedCases,\n            backgroundColor: 'rgba(65,131,196,0.4)',\n            hidden: true\n          },\n\n          {\n            label: 'Deaths',\n            data: deaths,\n            // backgroundColor: backgroundColors,\n            backgroundColor: 'rgba(249, 54, 80, 0.2)'\n          },\n\n          {\n            label: 'Recovered',\n            data: cardsChartRecovered,\n            // backgroundColor: backgroundColors,\n            backgroundColor: 'rgba(249, 254, 239, 0.9)'\n          }\n\n        ]\n\n      },\n\n      chartDataActiveCasesLogarithmic: {\n\n        labels: labels,\n\n        datasets: [\n          {\n            label: 'Active Cases (Logarithmic)',\n            data: activeCasesLogarithmic,\n            backgroundColor: green,\n            hidden: false\n          }]\n      },\n\n      cardsData: {\n        totalCasesWorldWide: 1,\n        activeCasesWorldWide: 1,\n        deceasedWordlWide: 1,\n        dischargedWorldWide: 1,\n        totalCases: confirmedCases[confirmedCases.length - 1],\n        activeCases: confirmedCases[confirmedCases.length - 1] - recovered[recovered.length - 1] - deaths[deaths.length - 1],\n        deceased: deaths[deaths.length - 1],\n        discharged: recovered[recovered.length - 1],\n        newCases: confirmedCases[confirmedCases.length - 1] - confirmedCases[confirmedCases.length - 2],\n        percentageActiveCases: 2\n      },\n\n      cardsChartsData: {\n\n        cardsChartsNewCases: {\n          labels: labels,\n          datasets: [\n            {\n              label: 'New Cases',\n              data: cardsChartNewCases,\n              backgroundColor: () => {\n                return (cardsChartNewCases[cardsChartNewCases.length - 1] > cardsChartNewCases[cardsChartNewCases.length - 2]) ? 'rgba(220,53,69,0.9)' : 'rgba(40, 167, 69, 0.9)';\n              }\n            }]\n        },\n\n        cardsChartsActiveCases: {\n          labels: labels,\n          datasets: [\n            {\n              label: 'Active Cases',\n              data: cardsChartActiveCases,\n              backgroundColor: () => {\n                return (cardsChartActiveCases[cardsChartActiveCases.length - 1] > cardsChartActiveCases[cardsChartActiveCases.length - 2]) ? 'rgba(220,53,69,0.9)' : 'rgba(40, 167, 69, 0.9)';\n              }\n            }]\n        },\n\n        cardsChartsDeaths: {\n          labels: labels,\n          datasets: [\n            {\n              label: 'Deaths',\n              data: cardsChartDeaths,\n              backgroundColor: () => {\n                return (cardsChartDeaths[cardsChartDeaths.length - 1] > cardsChartDeaths[cardsChartDeaths.length - 2]) ? 'rgba(220,53,69,0.9)' : 'rgba(40, 167, 69, 0.9)';\n              }\n            }]\n        },\n\n        cardsChartsRecovered: {\n          labels: labels,\n          datasets: [\n            {\n              label: 'Recovered',\n              data: cardsChartRecovered,\n              backgroundColor: () => {\n                return (cardsChartRecovered[cardsChartRecovered.length - 1] > cardsChartRecovered[cardsChartRecovered.length - 2]) ? 'rgba(40, 167, 69, 0.9)' : 'rgba(220,53,69,0.9)';\n              }\n            }]\n        }\n\n      },\n\n      countryName: countryName\n    })\n\n  }\n\n  render() {\n\n    // console.log(this.state.confirmedCases);\n\n    return (\n      <div className=\"container-fluid app-container \">\n\n\n        <div className='row mb-5'>\n          <div className='col-2 p-0 ml-1 searchBar-container d-none  d-xl-block'>\n            <Searchbardesktop\n              countryList={this.state.countryListArrayBurgerMenu}\n              click={this.changeCountryHandler}\n            />\n          </div>\n\n\n          <div className='col-xl-9 ml-xl-1'>\n\n              {/* Header */}\n            {/* <div className='row'>\n              <div className=\" col-12 header mx-auto mb-5\" align=\"center\">\n\n                <div className='col-12 row'>\n                  <div className='col-md-4 logo-container'>\n                  </div>\n                </div>\n              </div>\n              </div> */}\n\n              <div className='row'>\n              {/* Subheader */}\n              <div className=' subHeader  mt-2'>\n                <div className='col-12'>\n                  <h3>{this.state.countryName}</h3>\n                  <small>Last Update: {this.state.confirmedCases.labels[this.state.confirmedCases.labels.length - 1]}</small>\n                </div>\n              </div>\n            </div>\n            <hr className='bellow-header-hr'/>\n\n\n\n\n\n            {/* Cards */}\n            <div className='row col-md-12 mx-auto mb-4 mt-5 cardsContainer'>\n\n\n              <div className='col-lg-2 mb-2 mt-2 cardContainer'  >\n\n                <div className='popoverTotalCases'>\n                  <OverlayTrigger\n                    trigger=\"click\"\n                    rootClose\n                    key={'bottom'}\n                    placement={'bottom'}\n                    overlay={\n                      <Popover id={`popover-positioned-${'bottom'}`}>\n                        <PopoverTitle as=\"h6\"><strong>Total number of cases in {this.state.countryName}</strong></PopoverTitle>\n                        <PopoverContent>\n                          <p>The total number of cases occured in {this.state.countryName}. </p>\n                          <p>Each column in the chart, represents one day.</p>\n                          <p>If the total number of cases show an upward trend, the bars in the  chart will be displayed in red color. If the total number of cases show an downward trend, then the bars will be displayed in green color. </p> <p className='popoverNote'>Note:\n              <small> This metric is based on the tests performed in the specific country. In most countries the tests are being performed only to patients that show acute symptoms. The actual number of total cases is much higher, but they present mild symptoms.</small></p>\n                        </PopoverContent>\n                      </Popover>\n                    }\n                  >\n                    <div variant=\"secondary\">\n\n                      <Card\n                        title=\"Total Cases\"\n                        metrics={this.state.cardsData.totalCases}\n                        class=\"card totalCases mb-md-4 mb-sm-4 mb-4\"\n\n                        // Chart\n                        type='Bar'\n                        data={this.state.confirmedCases}\n                        options={{\n                          legend: {\n                            display: false\n                          },\n\n                          scales: {\n                            xAxes: [{ display: false }],\n                            yAxes: [{ display: false }],\n                          },\n\n                          elements: {\n                            point: {\n                              radius: 1\n                            }\n                          },\n\n                          tooltips: {\n                            enabled: false,\n\n                          },\n                          maintainAspectRatio: false\n                        }}\n\n                      />\n\n\n                    </div>\n                  </OverlayTrigger>{' '}\n                </div>\n\n              </div>\n\n              <div className='col-lg-2 mb-2 mt-2 cardContainer' >\n\n                <div className='popoverNewcases'>\n                  <OverlayTrigger\n                    trigger=\"click\"\n                    rootClose\n                    key={'bottom'}\n                    placement={'bottom'}\n                    overlay={\n                      <Popover id={`popover-positioned-${'bottom'}`}>\n                        <PopoverTitle as=\"h6\"><strong>Total number of new cases recorded in {this.state.countryName}</strong></PopoverTitle>\n                        <PopoverContent>\n                          <p>\n                            The total number of new cases, as long as they are reported (usually occured in the past 24 hours).\n            </p>\n                          <p>The higher the percentage value, the worse is the situation in the country regarding the spread of the virus. A good percentage should be considered a percentage around 4% for most countries.</p>\n                          <p>Each column in the chart, represents one day.</p>\n                          <p>If the number of new cases show an upward trend, the bars in the  chart will be displayed in red color. If the number of new cases show an downward trend, then the bars will be displayed in green color. </p> <p className='popoverNote'>Note:\n              <small> This metric is based on the tests performed in the specific country. In most countries the tests are being performed only to patients that show acute symptoms. The actual number of total cases is much higher, but they present mild symptoms.</small></p>\n                        </PopoverContent>\n                      </Popover>\n                    }\n                  >\n                    <div variant=\"secondary\">\n\n                      <Card\n                        title=\"New Cases\"\n                        metrics={this.state.cardsData.newCases}\n                        percentage={(this.state.cardsData.newCases * 100 / this.state.cardsData.totalCases).toFixed(2)}\n                        class=\"card newCases mb-md-4 mb-sm-4 mb-4\"\n\n                        // Chart\n                        type='Bar'\n                        labels='New Cases Card Chart'\n                        data={this.state.cardsChartsData.cardsChartsNewCases}\n                        options={{\n                          legend: {\n                            display: false\n                          },\n\n                          scales: {\n                            xAxes: [{ display: false }],\n                            yAxes: [{ display: false }],\n                          },\n\n                          elements: {\n                            point: {\n                              radius: 0\n                            }\n                          },\n\n                          tooltips: {\n                            enabled: false,\n                          },\n                          maintainAspectRatio: false\n                        }}\n                      />\n\n                    </div>\n                  </OverlayTrigger>{' '}\n                </div>\n\n\n              </div>\n\n              <div className='col-lg-2 mb-2 mt-2 cardContainer'>\n\n                <div className='popoverActiveCases'>\n                  <OverlayTrigger\n                    trigger=\"click\"\n                    rootClose\n                    key={'bottom'}\n                    placement={'bottom'}\n                    overlay={\n                      <Popover id={`popover-positioned-${'bottom'}`}>\n                        <PopoverTitle as=\"h6\"><strong>The number of active cases in {this.state.countryName}</strong></PopoverTitle>\n                        <PopoverContent>\n                          <p>\n                            This metric takes under consideration the reported new cases, as well as the reported deaths and recoveries.\n            </p>\n                          <p>The higher the percentage value, the worse is the situation in the country, since this percentage is portraing cases that still had no outcome. Most patients symptoms retreat after about 20 days.</p>\n                          <p>Each column in the chart, represents one day.</p>\n                          <p>If the number of active cases show an upward trend, the bars in the chart will be displayed in red color. If the number of active cases show an downward trend, then the bars will be displayed in green color. </p> <p className='popoverNote'>Note:\n              <small> This metric is based on the tests performed in the specific country. In most countries the tests are being performed only to patients that show acute symptoms. The actual number of total cases is much higher, but they present mild symptoms.</small></p>\n                        </PopoverContent>\n                      </Popover>\n                    }\n                  >\n                    <div variant=\"secondary\">\n\n                      <Card\n                        title=\"Active Cases\"\n                        metrics={this.state.cardsData.activeCases}\n                        percentage={(this.state.cardsData.activeCases * 100 / this.state.cardsData.totalCases).toFixed(2)}\n                        class=\"card activeCases mb-md-4 mb-sm-4 mb-4\"\n\n                        // Chart\n                        type='Bar'\n                        labels='Active Cases'\n                        data={this.state.cardsChartsData.cardsChartsActiveCases}\n                        options={{\n                          legend: {\n                            display: false\n                          },\n\n                          scales: {\n                            xAxes: [{ display: false }],\n                            yAxes: [{ display: false }],\n                          },\n\n                          elements: {\n                            point: {\n                              radius: 0\n                            }\n                          },\n\n                          tooltips: {\n                            enabled: false,\n\n                          },\n                          maintainAspectRatio: false\n                        }}\n                      />\n\n                    </div>\n                  </OverlayTrigger>{' '}\n                </div>\n              </div>\n\n              <div className='col-lg-2 mb-2 mt-2 cardContainer'>\n\n                <div className='popoverDeceased'>\n                  <OverlayTrigger\n                    trigger=\"click\"\n                    rootClose\n                    key={'bottom'}\n                    placement={'bottom'}\n                    overlay={\n                      <Popover id={`popover-positioned-${'bottom'}`}>\n                        <PopoverTitle as=\"h6\"><strong>The number of deseased patients in {this.state.countryName}</strong></PopoverTitle>\n                        <PopoverContent>\n                          <p>\n                            This metric takes under consideration the reported deaths for {this.state.countryName}.\n            </p>\n                          <p>The higher the percentage value, the worse is the situation in the country. The estimated percentage of deaths globaly for the SARS Covid-19 is between 1% and 2%.</p>\n                          <p>Each column in the chart, represents one day.</p>\n                          <p>If the number of deaths show an upward trend, the bars in the chart will be displayed in red color. If the number of deaths show an downward trend, then the bars will be displayed in green color. </p> <p className='popoverNote'>Note:\n              <small> This metric is based on the tests performed in the specific country. In most countries the tests are being performed only to patients that show acute symptoms. The actual number of total cases is much higher, but they present mild symptoms.</small></p>\n                        </PopoverContent>\n                      </Popover>\n                    }\n                  >\n                    <div variant=\"secondary\">\n                      <Card\n                        title=\"Deceased\"\n                        metrics={this.state.cardsData.deceased}\n                        percentage={(this.state.cardsData.deceased * 100 / this.state.cardsData.totalCases).toFixed(2)}\n                        class=\"card deceased mb-md-4 mb-sm-4 mb-4\"\n\n                        // Chart\n                        type='Bar'\n                        labels='Deaths'\n                        data={this.state.cardsChartsData.cardsChartsDeaths}\n                        options={{\n                          legend: {\n                            display: false\n                          },\n\n                          scales: {\n                            xAxes: [{ display: false }],\n                            yAxes: [{ display: false }],\n                          },\n\n                          elements: {\n                            point: {\n                              radius: 0\n                            }\n                          },\n\n                          tooltips: {\n                            enabled: false,\n\n                          },\n                          maintainAspectRatio: false\n                        }}\n\n                      />\n\n                    </div>\n                  </OverlayTrigger>{' '}\n                </div>\n              </div>\n\n              <div className='col-lg-2 mb-2 mt-2 cardContainer'>\n\n                <div className='popoverDischarged'>\n                  <OverlayTrigger\n                    trigger=\"click\"\n                    rootClose\n                    key={'bottom'}\n                    placement={'bottom'}\n                    overlay={\n                      <Popover id={`popover-positioned-${'bottom'}`}>\n                        <PopoverTitle as=\"h6\"><strong>The number of discharged patients in {this.state.countryName}</strong></PopoverTitle>\n                        <PopoverContent>\n                          <p>\n                            This metric represents cases that did the SARS Covid-19 test in {this.state.countryName}, but now the symptoms have retreated and patients are now considered healthy again.\n            </p>\n                          <p>The higher the percentage value, the better the situation is in the country.</p>\n                          <p>Each column in the chart, represents one day.</p>\n                          <p>If the number of discharged cases show an upward trend, the bars in the chart will be displayed in green color. If the number of dischaged show an downward trend, then the bars will be displayed in red color. </p> <p className='popoverNote'>Note:\n              <small> This metric is based on the tests performed in the specific country. In most countries the tests are being performed only to patients that show acute symptoms. The actual number of total cases is much higher, but they present mild symptoms.</small></p>\n                        </PopoverContent>\n                      </Popover>\n                    }\n                  >\n                    <div variant=\"secondary\">\n                      <Card\n                        title=\"Discharged\"\n                        metrics={this.state.cardsData.discharged}\n                        percentage={((this.state.cardsData.discharged * 100 / this.state.cardsData.totalCases).toFixed(2))}\n                        class=\"card discharged mb-md-4 mb-sm-4 mb-4\"\n\n                        // Chart\n                        type='Bar'\n                        labels='Discharged'\n                        data={this.state.cardsChartsData.cardsChartsRecovered}\n                        options={{\n                          legend: {\n                            display: false\n                          },\n\n                          scales: {\n                            xAxes: [{ display: false }],\n                            yAxes: [{ display: false }],\n                          },\n\n                          elements: {\n                            point: {\n                              radius: 0\n                            }\n                          },\n\n                          tooltips: {\n                            enabled: false,\n\n                          },\n                          maintainAspectRatio: false\n                        }}\n\n                      />\n\n                    </div>\n                  </OverlayTrigger>{' '}\n                </div>\n\n\n\n              </div>\n\n            </div>\n\n            {/* Charts */}\n            <div className='row m-0  chartsContainer'>\n\n              <div className='col-lg-5 p-1 chart'>\n                {/* TOTAL CASES */}\n                <Tabs defaultActiveKey=\"Line\" id=\"tabsTotalCases\">\n                  <Tab eventKey=\"Line\" title=\"Line\">\n                    <Chart\n                      type='Line'\n                      backgroundcolor={this.state.confirmedCases.datasets.backgroundColor}\n                      label={this.state.confirmedCases.datasets.label}\n                      data={this.state.confirmedCases}\n                      options={{\n                        legend: {\n                          title: {\n                            display: true,\n                            text: 'Recoveries VS Deaths'\n                          }\n                        },\n\n                        scales: {\n                          xAxes: [{ display: true }],\n                          yAxes: [{ display: true }],\n                        },\n\n                        elements: {\n                          point: {\n                            radius: 0\n                          }\n                          },\n\n                        tooltips: {\n\n                          enabled: true,\n\n                          callbacks: {\n                            label: function (tooltipItem) {\n                              return tooltipItem.yLabel;\n                            }\n                          }\n                        },\n                        maintainAspectRatio: false\n                      }} />\n\n                  </Tab>\n                  <Tab eventKey=\"Bar\" title=\"Bar\">\n\n                    <Chart\n                      type='Bar'\n                      backgroundcolor={this.state.confirmedCases.datasets.backgroundColor}\n                      label={this.state.confirmedCases.datasets.label}\n                      data={this.state.confirmedCases}\n                      options={{\n                        legend: {\n                          title: {\n                            display: true,\n                            text: 'Recoveries VS Deaths'\n                          }\n                        },\n\n                        scales: {\n                          xAxes: [{ display: true, \n                          \n                           \n                            ticks: {\n                                autoSkip: true,\n                                maxTicksLimit: 20\n                            }\n                          \n                          \n                          }],\n                          yAxes: [{ display: true,\n                          \n                            \n                            ticks: {\n                                autoSkip: true,\n                                maxTicksLimit: 20\n                            }\n                          \n                          }],\n                        },\n                   \n                        tooltips: {\n\n                          enabled: true,\n\n                          callbacks: {\n                            label: function (tooltipItem) {\n                              return tooltipItem.yLabel;\n                            }\n                          }\n                        },\n                        maintainAspectRatio: false\n                      }} />\n\n                  </Tab>\n                  {/* <Tab eventKey=\"Doughnut\" title=\"Doughnut\">\n                    <Chart\n                      type='Doughnut'\n                      backgroundcolor={this.state.confirmedCases.datasets.backgroundColor}\n                      label={this.state.confirmedCases.datasets.label}\n                      data={this.state.confirmedCases}\n                      options={{\n                        legend: {\n                          title: {\n                            display: true,\n                            text: 'Recoveries VS Deaths'\n                          }\n                        },\n\n                        scales: {\n                          xAxes: [{ display: true }],\n                          yAxes: [{ display: true }],\n                        },\n\n                        tooltips: {\n\n                          enabled: true,\n\n                          callbacks: {\n                            label: function (tooltipItem) {\n                              return tooltipItem.yLabel;\n                            }\n                          }\n                        },\n                        maintainAspectRatio: false\n                      }} />\n                  </Tab> */}\n                </Tabs>\n\n              </div>\n\n              <div className='col-lg-5 p-1 chart'>\n\n                <Tabs defaultActiveKey=\"Line\" id=\"tabsMixedConfirmedDeathsRecovered\">\n                  <Tab eventKey=\"Line\" title=\"Line\">\n                    <Chart\n                      type='Line'\n                      backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n                      label={this.state.chartDataDeathsVsRecovered.datasets.label}\n                      data={this.state.chartDataDeathsVsRecovered}\n                      options={{\n                        legend: {\n                          title: {\n                            text: 'Recoveries VS Deaths',\n                            display: true\n                          }\n                        },\n\n                        scales: {\n                          xAxes: [{ display: true }],\n                          yAxes: [{ display: true }],\n                        },\n\n                        \n                        elements: {\n                          point: {\n                            radius: 0\n                          }\n                          },\n\n\n                        tooltips: {\n\n                          enabled: true,\n\n                          callbacks: {\n                            label: function (tooltipItem) {\n                              return tooltipItem.yLabel;\n                            }\n                          }\n                        },\n                        maintainAspectRatio: false\n                      }} />\n                  </Tab>\n                  <Tab eventKey=\"Bar\" title=\"Bar\">\n                    <Chart\n                      type='Bar'\n                      backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n                      label={this.state.chartDataDeathsVsRecovered.datasets.label}\n                      data={this.state.chartDataDeathsVsRecovered}\n                      options={{\n                        legend: {\n                          title: {\n                            text: 'Recoveries VS Deaths',\n                            display: true\n                          }\n                        },\n\n                        scales: {\n                          xAxes: [{ display: true }],\n                          yAxes: [{ display: true }],\n                        },\n\n                        tooltips: {\n\n                          enabled: true,\n\n                          callbacks: {\n                            label: function (tooltipItem) {\n                              return tooltipItem.yLabel;\n                            }\n                          }\n                        },\n                        maintainAspectRatio: false\n                      }} />\n                  </Tab>\n                  {/* <Tab eventKey=\"Doughnut\" title=\"Doughnut\">\n                    <Chart\n                      type='Doughnut'\n                      backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n                      label={this.state.chartDataDeathsVsRecovered.datasets.label}\n                      data={this.state.chartDataDeathsVsRecovered}\n                      options={{\n                        legend: {\n                          title: {\n                            text: 'Recoveries VS Deaths',\n                            display: true\n                          }\n                        },\n\n                        scales: {\n                          xAxes: [{ display: true }],\n                          yAxes: [{ display: true }],\n                        },\n\n                        tooltips: {\n\n                          enabled: true,\n\n                          callbacks: {\n                            label: function (tooltipItem) {\n                              return tooltipItem.yLabel;\n                            }\n                          }\n                        },\n                        maintainAspectRatio: false\n                      }} />\n                  </Tab> */}\n                </Tabs>\n\n              </div>\n\n            </div>\n\n\n            {/* Charts */}\n            <div className='row m-0 chartsContainer'>\n\n              <div className='col-lg-5 p-1 chart logarithmic'>\n\n                <Tabs defaultActiveKey=\"Line\" id=\"tabsActiveCases\">\n                  <Tab eventKey=\"Line\" title=\"Line\">\n                    <Chart\n                      type='Line'\n                      backgroundcolor={this.state.chartDataActiveCasesLogarithmic.datasets.backgroundColor}\n                      label={this.state.chartDataActiveCasesLogarithmic.datasets.label}\n                      data={this.state.chartDataActiveCasesLogarithmic}\n                      options={{\n                        title: {\n                          display: true,\n                          text: 'Active Cases (Logarithmic)'\n                        },\n                        scales: {\n                          yAxes: [{\n                            display:  true,\n                            type: 'logarithmic'\n                          }],\n                    \n                        },\n\n                        elements: {\n                          point: {\n                            radius: 0\n                          }\n                          },\n\n                        maintainAspectRatio: false\n                      }} />\n                  </Tab>\n                  <Tab eventKey=\"Bar\" title=\"Bar\">\n                    <Chart\n                      type='Bar'\n                      backgroundcolor={this.state.chartDataActiveCasesLogarithmic.datasets.backgroundColor}\n                      label={this.state.chartDataActiveCasesLogarithmic.datasets.label}\n                      data={this.state.chartDataActiveCasesLogarithmic}\n                      options={{\n                        title: {\n                          display: true,\n                          text: 'Active Cases (Logarithmic)'\n                        },\n                        scales: {\n                          yAxes: [{\n                            type: 'logarithmic'\n                          }]\n                        }\n                      }} />\n                  </Tab>\n                  {/* <Tab eventKey=\"Doughnut\" title=\"Doughnut\">\n                    <Chart\n                      type='Doughnut'\n                      backgroundcolor={this.state.chartDataActiveCasesLogarithmic.datasets.backgroundColor}\n                      label={this.state.chartDataActiveCasesLogarithmic.datasets.label}\n                      data={this.state.chartDataActiveCasesLogarithmic}\n                      options={{\n                        title: {\n                          display: true,\n                          text: 'Active Cases (Logarithmic)'\n                        },\n                        scales: {\n                          yAxes: [{\n                            type: 'logarithmic'\n                          }]\n                        }\n                      }} />\n                  </Tab> */}\n                </Tabs>\n\n              </div>\n\n              <div className='col-lg-5 p-1 chart' >\n\n                <Tabs defaultActiveKey=\"Line\" id=\"tabsDeathsVsRecovered\">\n                  <Tab eventKey=\"Line\" title=\"Line\">\n                    <Chart\n                      type='Line'\n                      backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n                      label={this.state.chartDataDeathsVsRecovered.datasets.label}\n                      data={this.state.chartDataDeathsVsRecovered}\n                      options={{\n                        legend: {\n                          title: {\n                            display: true,\n                            text: 'Recoveries VS Deaths'\n                          }\n                        },\n\n                        scales: {\n                          xAxes: [{ display: true }],\n                          yAxes: [{ display: true }],\n                        },\n\n                        elements: {\n                          point: {\n                            radius: 0\n                          }\n                          },\n\n\n                        tooltips: {\n\n                          enabled: true,\n\n                          callbacks: {\n                            label: function (tooltipItem) {\n                              return tooltipItem.yLabel;\n                            }\n                          }\n                        },\n                        maintainAspectRatio: false\n                      }} />\n                  </Tab>\n                  <Tab eventKey=\"Bar\" title=\"Bar\">\n                    <Chart\n                      type='Bar'\n                      backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n                      label={this.state.chartDataDeathsVsRecovered.datasets.label}\n                      data={this.state.chartDataDeathsVsRecovered}\n                      options={{\n                        legend: {\n                          title: {\n                            display: true,\n                            text: 'Recoveries VS Deaths'\n                          }\n                        },\n\n                        scales: {\n                          xAxes: [{ display: true }],\n                          yAxes: [{ display: true }],\n                        },\n\n                        tooltips: {\n\n                          enabled: true,\n\n                          callbacks: {\n                            label: function (tooltipItem) {\n                              return tooltipItem.yLabel;\n                            }\n                          }\n                        },\n                        maintainAspectRatio: false\n                      }} />\n                  </Tab>\n                  {/* <Tab eventKey=\"Doughnut\" title=\"Doughnut\">\n                    <Chart\n                      type='Doughnut'\n                      backgroundcolor={this.state.chartDataDeathsVsRecovered.datasets.backgroundColor}\n                      label={this.state.chartDataDeathsVsRecovered.datasets.label}\n                      data={this.state.chartDataDeathsVsRecovered}\n                      options={{\n                        legend: {\n                          title: {\n                            display: true,\n                            text: 'Recoveries VS Deaths'\n                          }\n                        },\n\n                        scales: {\n                          xAxes: [{ display: true }],\n                          yAxes: [{ display: true }],\n                        },\n\n                        tooltips: {\n\n                          enabled: true,\n\n                          callbacks: {\n                            label: function (tooltipItem) {\n                              return tooltipItem.yLabel;\n                            }\n                          }\n                        },\n                        maintainAspectRatio: false\n                      }} />\n                  </Tab> */}\n                </Tabs>\n\n              </div>\n\n            </div>\n\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className='row footer mt-5' id='footer'>\n          <hr className='col-10 footer-hr' />\n          <div className='col-12'>\n            <p>Find the code of the project on <a href='https://github.com/TheoKondak/covid-19-cata-visualized' target='_blank' rel=\"noopener noreferrer\" title='Find project on GitHub'>GitHub</a>\n            </p>\n            <p><small><a href='https://raw.githubusercontent.com/TheoKondak/Covid-19-Data-Visualized/master/README.md' target='_blank' rel=\"noopener noreferrer\" >Changelog</a></small></p>\n            <p>This project is created with:\n            <br />\n              <small><a href='https://github.com/facebook/create-react-app#readme' target='_blank' rel=\"noopener noreferrer\" title='React Chart js 2'>React</a></small>\n              <span><small> | </small> </span>\n              <small><a href='https://github.com/jerairrest/react-chartjs-2' target='_blank' rel=\"noopener noreferrer\" title='React Chart js 2'>React Chart js 2</a></small>\n              <span><small> | </small> </span>\n              <small><a href='https://github.com/yjose/reactjs-popup-burger-menu' target='_blank' rel=\"noopener noreferrer\" title='React JS popup burger menu'>React js popup burger menu</a></small>\n            </p>\n\n            <p>API: <a href='https://github.com/pomber/covid19' title='Pomber Covid 19 JSON API' target='_blank' rel=\"noopener noreferrer\">Covid19</a> by <a href='https://github.com/pomber' title='Pomber on Github' target='_blank' rel=\"noopener noreferrer\">Rodrigo Pombo</a> </p>\n            <p>\n              Copyright 2020 Theodoros Kondakos. All rights reserved\n            <a href='https://github.com/TheoKondak/Covid-19-Data-Visualized/blob/master/LICENSE' target='_blank' rel='noopener noreferrer' title='Fight Covid-19 with Folding @home'> View Licence Information</a>\n            </p>\n          </div>\n\n\n        </div>\n\n\n\n        {/* Burger Menu */}\n        <div className='cardContainer countryList .d-lg-none .d-xl-block'>\n          <Burgermenu\n            countryList={this.state.countryListArrayBurgerMenu}\n            click={this.changeCountryHandler}\n          />\n        </div>\n\n\n\n\n      </div> //App\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.76a6cc0d.png\";"],"sourceRoot":""}